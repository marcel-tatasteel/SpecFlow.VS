trigger:
- main

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 6.0.x'
  inputs:
    version: 6.0.x

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 7.0.x'
  inputs:
    version: 7.0.x

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 8.0.x'
  inputs:
    version: 8.0.x

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore

- task: PowerShell@2
  displayName: 'Build Connectors'
  inputs:
    targetType: 'inline'
    script: |
        cd .\Connectors
        .\build.ps1 $(buildConfiguration)

- task: VSBuild@1
  displayName: 'Build Solution'
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployExtension=false /p:AppInsightsInstrumentationKey=$(AppInsightsInstrumentationKey) /nowarn:VSTHRD010'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  displayName: 'Install nuget packages'
  inputs:
    command: 'custom'
    arguments: 'install .\Tests\ExternalPackages\PackagesForTests\Packages.config'

- task: DotNetCoreCLI@2
  displayName: Run Unit Tests
  inputs:
    command: test
    projects: '**/SpecFlow.VisualStudio.Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build --collect "Code coverage"'
    testRunTitle: Unit Tests
    publishTestResults: true

- task: DotNetCoreCLI@2
  displayName: Run Connector Tests
  inputs:
    command: test
    projects: '**/*Connector**Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build'
    testRunTitle: Connector Tests
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: Run SpecFlow Scenarios
  inputs:
    command: test
    projects: '**/*[Ss]pecs/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --runtime win-x64'
    testRunTitle: 'Deveroom Specs'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: 'Copy dlls and changelog'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: |
     **\bin\$(buildConfiguration)\**
     Changelog.md
    TargetFolder: '$(build.artifactstagingdirectory)\drop'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: 'Copy marketplace scripts'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: |
     publish*.ps1
     .marketplace\**
    TargetFolder: '$(build.artifactstagingdirectory)\marketplace'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: 'Copy NuGet folder'
  inputs:
    SourceFolder: 'd:\a\1\Nuget'
    Contents: '**'
    TargetFolder: '$(build.artifactstagingdirectory)\drop\NuGet'
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: 'Copy VSIX'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(buildConfiguration)\**\*.vsix'
    TargetFolder: '$(build.artifactstagingdirectory)\vsix'
    flattenFolders: true
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)\drop'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: marketplace'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)\marketplace'
    ArtifactName: marketplace
  condition: succeededOrFailed()
 
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: vsix'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)\vsix'
    ArtifactName: vsix
  condition: succeededOrFailed()
